// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	context "context"
	infra "link_service/internal/interfaces/infra"

	mock "github.com/stretchr/testify/mock"
)

// Database is an autogenerated mock type for the Database type
type Database struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, link
func (_m *Database) Create(ctx context.Context, link infra.InputLink) error {
	ret := _m.Called(ctx, link)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, infra.InputLink) error); ok {
		r0 = rf(ctx, link)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: ctx, fakeLink
func (_m *Database) Find(ctx context.Context, fakeLink string) (*string, error) {
	ret := _m.Called(ctx, fakeLink)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*string, error)); ok {
		return rf(ctx, fakeLink)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *string); ok {
		r0 = rf(ctx, fakeLink)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, fakeLink)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDatabase creates a new instance of Database. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDatabase(t interface {
	mock.TestingT
	Cleanup(func())
}) *Database {
	mock := &Database{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
